/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.jvm)

    // Apply the application plugin to add support for building a CLI application in Java.
    application

    kotlin("plugin.serialization") version "1.9.21"
    id("com.google.protobuf") version "0.9.4"
    id("org.jetbrains.compose") version "1.6.0-alpha01"
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    google()
    maven("https://maven.pkg.jetbrains.space/public/p/compose/dev")
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)
    implementation(compose.desktop.currentOs)
    implementation("com.google.protobuf:protobuf-kotlin:3.25.1")
    implementation("io.javalin:javalin:5.6.3")
    implementation("me.desair.tus:tus-java-server:1.0.0-3.0")
    implementation("org.slf4j:slf4j-simple:2.0.7")
    implementation("com.akuleshov7:ktoml-core:0.5.0")
    implementation("com.akuleshov7:ktoml-file:0.5.0")
    implementation("com.akuleshov7:ktoml-source:0.5.0")

}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = "com.google.protobuf:protoc:3.25.1"
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(16))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("me.mafrans.srm.AppKt")
}

sourceSets {
    main {
        resources {
            srcDir("${buildDir}/client")

        }
    }
}

tasks.register("buildClient") {
    group = "build"

    doLast {
        exec {
            workingDir("${projectDir}/src/main/upload-client")
            executable("bun")
            args("run", "build")
        }
    }
}

tasks.named("classes") {
    dependsOn("buildClient")
}